import { getSignDegreeConfig } from './handle-storage'

interface SignatureResponse {
  status: number
  signature?: string
  message?: string
  validationStatus?: {
    status: number
  }
}

type WebSocketEndpoint = string

const signDegreeConfig = getSignDegreeConfig()
const DEFAULT_SIGN_ENDPOINT = signDegreeConfig.signService
const DEFAULT_VERIFY_ENDPOINT = signDegreeConfig.verifyService

const createWebSocketConnection = <T>(
  params: object,
  endpoint: WebSocketEndpoint,
  // eslint-disable-next-line no-unused-vars
  handleResponse: (data: any) => T
): Promise<T> => {
  return new Promise((resolve, reject) => {
    console.log('üîç DEBUG: B·∫Øt ƒë·∫ßu k·∫øt n·ªëi WebSocket ƒë·∫øn:', endpoint)

    if (!('WebSocket' in window)) {
      const error = 'WebSocket kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi tr√¨nh duy·ªát n√†y!'
      console.log('‚ùå ERROR:', error)
      reject(new Error(error))
      return
    }

    try {
      const jsonParams = JSON.stringify(params)
      console.log('üöÄ DEBUG: Tham s·ªë g·ª≠i ƒëi:', jsonParams)

      console.log('üîÑ DEBUG: ƒêang t·∫°o k·∫øt n·ªëi WebSocket...')
      const ws = new WebSocket(endpoint)

      ws.onopen = () => {
        console.log('‚úÖ DEBUG: K·∫øt n·ªëi WebSocket ƒë√£ m·ªü, ƒëang g·ª≠i d·ªØ li·ªáu...')
        ws.send(jsonParams)
      }

      ws.onmessage = (evt) => {
        console.log('üì© DEBUG: ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ WebSocket:', evt.data)
        try {
          const response = JSON.parse(evt.data)
          console.log('üîç DEBUG: Ph·∫£n h·ªìi ƒë√£ parse:', response)
          resolve(handleResponse(response))
        } catch (error) {
          console.log('‚ùå DEBUG: L·ªói x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ plugin:', error)
          reject(error)
        } finally {
          console.log('üîí DEBUG: ƒê√≥ng k·∫øt n·ªëi WebSocket')
          ws.close()
        }
      }

      ws.onclose = (event) => {
        console.log('üîí DEBUG: K·∫øt n·ªëi WebSocket ƒë√£ ƒë√≥ng v·ªõi m√£:', event.code, 'l√Ω do:', event.reason)
      }

      ws.onerror = (error) => {
        console.log('‚ùå DEBUG: L·ªói WebSocket:', error)
        reject(error)
      }

      // Th√™m timeout ƒë·ªÉ ph√°t hi·ªán k·∫øt n·ªëi kh√¥ng th√†nh c√¥ng
      setTimeout(() => {
        if (ws.readyState !== WebSocket.OPEN) {
          console.log('‚è±Ô∏è DEBUG: K·∫øt n·ªëi WebSocket timeout sau 5 gi√¢y')
          ws.close()
          reject(new Error('K·∫øt n·ªëi WebSocket timeout - Plugin k√Ω s·ªë c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng ch·∫°y'))
        }
      }, 5000)
    } catch (error) {
      console.log('‚ùå DEBUG: L·ªói kh·ªüi t·∫°o k·∫øt n·ªëi:', error)
      reject(error)
    }
  })
}

export const signDigitalSignature = (
  hashValue: string,
  wsSign: WebSocketEndpoint = DEFAULT_SIGN_ENDPOINT
): Promise<string> => {
  console.log('üöÄ DEBUG: B·∫Øt ƒë·∫ßu qu√° tr√¨nh k√Ω s·ªë v·ªõi hash:', hashValue)

  // Ki·ªÉm tra plugin k√Ω s·ªë ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
  console.log('üîç DEBUG: Ki·ªÉm tra plugin k√Ω s·ªë...')

  const params = {
    HashValue: hashValue,
    HashAlg: 'SHA256'
  }
  console.log('üöÄ DEBUG: Tham s·ªë k√Ω s·ªë:', params)

  return createWebSocketConnection<string>(params, wsSign, (response: SignatureResponse) => {
    console.log('üöÄ DEBUG: K·∫øt qu·∫£ k√Ω s·ªë:', response)
    if (response.status === 0 && response.signature) {
      console.log('‚úÖ DEBUG: K√Ω s·ªë th√†nh c√¥ng')
      return response.signature
    }
    const errorMsg = response.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi k√Ω s·ªë'
    console.log('‚ùå DEBUG: K√Ω s·ªë th·∫•t b·∫°i:', errorMsg)
    throw new Error(errorMsg)
  })
}

export const verifyDigitalSignature = (
  signature: string,
  hashValue: string,
  wsVerify: WebSocketEndpoint = DEFAULT_VERIFY_ENDPOINT
): Promise<boolean> => {
  console.log('üöÄ DEBUG: B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√°c th·ª±c ch·ªØ k√Ω')

  const params = {
    Signature: signature,
    Base64Content: hashValue
  }
  console.log('üöÄ DEBUG: Tham s·ªë x√°c th·ª±c:', params)

  return createWebSocketConnection<boolean>(params, wsVerify, (response: SignatureResponse) => {
    console.log('üöÄ DEBUG: K·∫øt qu·∫£ x√°c th·ª±c:', response)
    if (response.validationStatus?.status === 0) {
      console.log('‚úÖ DEBUG: X√°c th·ª±c th√†nh c√¥ng')
      return true
    }
    const errorMsg = response.message || 'X√°c th·ª±c ch·ªØ k√Ω kh√¥ng th√†nh c√¥ng'
    console.log('‚ùå DEBUG: X√°c th·ª±c th·∫•t b·∫°i:', errorMsg)
    return false
  })
}

// H√†m ki·ªÉm tra plugin k√Ω s·ªë ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
export const checkVGCAPluginInstalled = (): Promise<boolean> => {
  console.log('üîç DEBUG: Ki·ªÉm tra plugin VGCA...')

  return new Promise((resolve) => {
    try {
      const testWs = new WebSocket('wss://127.0.0.1:8987/GetVersion')

      testWs.onopen = () => {
        console.log('‚úÖ DEBUG: Plugin VGCA ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† ƒëang ch·∫°y')
        testWs.send('GetVersion')
        testWs.close()
        resolve(true)
      }

      testWs.onerror = () => {
        console.log('‚ùå DEBUG: Plugin VGCA ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng ch·∫°y')
        resolve(false)
      }

      setTimeout(() => {
        if (testWs.readyState !== WebSocket.OPEN) {
          console.log('‚è±Ô∏è DEBUG: Ki·ªÉm tra plugin VGCA timeout')
          testWs.close()
          resolve(false)
        }
      }, 2000)
    } catch (error) {
      console.log('‚ùå DEBUG: L·ªói ki·ªÉm tra plugin VGCA:', error)
      resolve(false)
    }
  })
}
